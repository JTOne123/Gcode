using System;
using System.Linq;
using Gcode.Utils.Entity.Slicer;

namespace Gcode.Utils.SlicerParser
{
	public class PrusaSlicerParser : SlicerParserBase<Slic3RInfo>
	{
		public override Slic3RInfo GetSlicerInfo(string[] fileContent)
		{
			var name = fileContent.FirstOrDefault(x => x.StartsWith("; generated by PrusaSlicer "));

			if (name?.Split(' ')[3] == null) return null;

			var res = new Slic3RInfo
			{
				Name = name.Split(' ')[3],
				Version = name.Split(' ')[4],
				// no edition provided by Slic3r
				Edition = string.Empty,
			};

			var filamentUsed = fileContent.Where(x => x.Contains("; filament used [cm3] = ")).ToArray();
			if (filamentUsed.Length == 1 && filamentUsed[0] != null)
			{

				var result = filamentUsed[0].Split(';')[1].Split('=')[1].Trim().Replace(".", ",");
				// two extruders
				if (result.Contains(" "))
				{
					var resultArray = result.Split(' ');
					if (resultArray.Length == 2)
					{
						var filamentUsedExtruder1 = resultArray[0].Trim().Replace(".", ",");
						var filamentUsedExtruder2 = resultArray[1].Trim().Replace(".", ",");

						if (filamentUsedExtruder1.EndsWith(",")) filamentUsedExtruder1 = filamentUsedExtruder1.Remove(filamentUsedExtruder1.Length - 1);

						res.FilamentUsedExtruder1 = Convert.ToDecimal(filamentUsedExtruder1);
						res.FilamentUsedExtruder2 = Convert.ToDecimal(filamentUsedExtruder2);
					}
					// res.FilamentUsedExtruder2 = Convert.ToDecimal(filamentUsed[1].Split(';')[1].Split('=')[1].Trim().Replace(".",","));
				}
				else
				{
					res.FilamentUsedExtruder1 = Convert.ToDecimal(result);
				}
			}

			var filamentDiameter = fileContent.FirstOrDefault(x => x.StartsWith("; filament_diameter"));

			if (!string.IsNullOrWhiteSpace(filamentDiameter))
			{
				var diameter = filamentDiameter.Split('=')?[1];
				if (string.IsNullOrWhiteSpace(diameter))
				{
					res.FilamentDiameter = null;
				}
				else
				{
					if (diameter.Contains(",")) diameter = diameter.Split(',')[0];
					res.FilamentDiameter = Convert.ToDecimal(diameter.Replace(".", ","));
				}

			}

			if (res.FilamentUsedExtruder1 != null && res.FilamentUsedExtruder1 > 0 && res.FilamentDiameter != null && res.FilamentDiameter > 0)
				// обьем = сечение * длину
				res.FilamentUsedExtruder1Volume = res.FilamentDiameter * res.FilamentUsedExtruder1;


			if (res.FilamentUsedExtruder2 != null && res.FilamentUsedExtruder2 > 0 && res.FilamentDiameter != null && res.FilamentDiameter > 0)
				// обьем = сечение * длину
				res.FilamentUsedExtruder2Volume = res.FilamentDiameter * res.FilamentUsedExtruder2;

			// estimated printing time
			var buildTimeStr = fileContent.FirstOrDefault(x => x.StartsWith("; estimated printing time"));

			if (!string.IsNullOrWhiteSpace(buildTimeStr))
			{
				var buildTime = buildTimeStr.Split('=')[1]?.Trim();
				if (!string.IsNullOrWhiteSpace(buildTime))
				{
					var resArr = buildTime.Split(' ');
					var hours = 0;
					var minutes = 0;
					var seconds = 0;

					if (resArr.Where(x => x.Contains("h"))?.Count() > 0) hours = Convert.ToInt32(resArr?.FirstOrDefault(x => x.Contains("h"))?.Split('h')?[0] ?? "0");
					if (resArr.Where(x => x.Contains("m"))?.Count() > 0) minutes = Convert.ToInt32(resArr?.FirstOrDefault(x => x.Contains("m"))?.Split('m')?[0] ?? "0");
					if (resArr.Where(x => x.Contains("s"))?.Count() > 0) seconds = Convert.ToInt32(resArr?.FirstOrDefault(x => x.Contains("s"))?.Split('s')?[0] ?? "0");

					var spanDuration = new TimeSpan(0, hours, minutes, seconds);
					res.EstimatedBuildTime = Math.Round(Convert.ToDecimal(spanDuration.TotalMinutes), 2);
				}
			}

			return res;
		}
	}
}
